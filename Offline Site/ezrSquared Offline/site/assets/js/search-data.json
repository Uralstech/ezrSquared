{"0": {
    "doc": "C# in ezr²",
    "title": "C# in ezr²",
    "content": ". | Embedding ezr² to your application! | ezr² doesn’t have [feature-ezr²-doesn’t-have] built-in! | API Documentation - TODO | . ",
    "url": "/CSAELs.html",
    
    "relUrl": "/CSAELs.html"
  },"1": {
    "doc": "C# in ezr²",
    "title": "Embedding ezr² to your application!",
    "content": "ezr² allows you to embed it to other programs and can also use C# variables and functions in ezr² code. ezr² code is much simple and easier to understand than, for example, C# code. So, embedding ezr² to your application adds the ability to script events and/or high level game logic in the hand of your designers and end users. ",
    "url": "/CSAELs.html#embedding-ezr-to-your-application",
    
    "relUrl": "/CSAELs.html#embedding-ezr-to-your-application"
  },"2": {
    "doc": "C# in ezr²",
    "title": "ezr² doesn’t have [feature-ezr²-doesn’t-have] built-in!",
    "content": "Now, this is where CSAELs step in. CSAELs or CSharp Assisted Ezr² Libraries are, to state the obvious, libraries or modules written in C# for ezr² scripting. With CSAELs, anyone who knows C# can add any feature they want to ezr²! These features can also be built-in to ezr² in the future - it’s a win-win situation! All you have to do is wrap C# variables, functions and whatnot in classes the ezr² interpreter can understand. All these “wrapper” classes are part of the ezr² API. ",
    "url": "/CSAELs.html#ezr-doesnt-have-feature-ezr-doesnt-have-built-in",
    
    "relUrl": "/CSAELs.html#ezr-doesnt-have-feature-ezr-doesnt-have-built-in"
  },"3": {
    "doc": "C# in ezr²",
    "title": "API Documentation - TODO",
    "content": " ",
    "url": "/CSAELs.html#api-documentation---todo",
    
    "relUrl": "/CSAELs.html#api-documentation---todo"
  },"4": {
    "doc": "Introduction and Documentation",
    "title": "An Introduction to ezr²",
    "content": ". | Why Learn ezr²? | Documentation . | Hello World, Displaying Text to The Screen and Strings | Nothing | Numbers | Floating-point Numbers | Variables | User Input | Conditions | One-liners | Loops | Count Loops | While Loops | Iteration Control | Arrays | Lists | . | . ",
    "url": "/Introduction.html#an-introduction-to-ezr",
    
    "relUrl": "/Introduction.html#an-introduction-to-ezr"
  },"5": {
    "doc": "Introduction and Documentation",
    "title": "Why Learn ezr²?",
    "content": "ezr² is a programming language that’s easy to learn and practical to use. ezr² can be learnt by anyone, of any age, in a few minutes. Anyone can extend the functionalities of ezr² with libraries. If you already know C#, you can even help in ezr² development with C# Assisted ezr² Libraries (CSAELs)! CSAELs bring the existing functionality of C# to ezr²! Experienced ezr² programmers can even ditch the boilerplate syntax for the shorter QuickSyntax. The normal syntax satisfies the beginner, as it is easy to use and QuickSyntax satisfies the expert, as it is very short. ",
    "url": "/Introduction.html#why-learn-ezr",
    
    "relUrl": "/Introduction.html#why-learn-ezr"
  },"6": {
    "doc": "Introduction and Documentation",
    "title": "Documentation",
    "content": "Start coding with the help of ezr²’s official documentation! Read the text in bold for a TL;DR. (Heavily inspired by this Python tutorial) . ",
    "url": "/Introduction.html#documentation",
    
    "relUrl": "/Introduction.html#documentation"
  },"7": {
    "doc": "Introduction and Documentation",
    "title": "Hello World, Displaying Text to The Screen and Strings",
    "content": "There’s a tradition in which programming tutorials start with a so-called Hello World program. A Hello World program simply prints the words “Hello world” to the screen, and the show() function lets you do that. You will learn more about functions later. show(\"Hello, World!\") . The show() function takes the value you put between the parentheses and prints it to the screen. This value is known as the argument. When you want to show “Hello world” to the screen, what you’re displaying is text, and text in ezr² is always put between double quotes. In the world of computer programming, this is called a string. The double quotes around a string mark its the start and end. This way, a string is easy to recognize for ezr². Here are a few more examples of valid strings: . \"Hello world\" \"My name is Uday\" \"This one is a bit longer. There is no limit to how long a string can be!\" . ",
    "url": "/Introduction.html#hello-world-displaying-text-to-the-screen-and-strings",
    
    "relUrl": "/Introduction.html#hello-world-displaying-text-to-the-screen-and-strings"
  },"8": {
    "doc": "Introduction and Documentation",
    "title": "Nothing",
    "content": "After printing anything to the screen, the show() function also displays “nothing”. This means the function show() returned no value, but printed the argument to the screen. If you write \"Example\" and run, only \"Example\" will be shown to the screen. As in the expression \"Example\" returned the string “Example”. nothing is a representation of a “lack of value” - equivalent to null (C#, C, Java, etc) or None (Python). ",
    "url": "/Introduction.html#nothing",
    
    "relUrl": "/Introduction.html#nothing"
  },"9": {
    "doc": "Introduction and Documentation",
    "title": "Numbers",
    "content": "Just like strings, you can ask ezr² to print numbers using the show() function. Unlike strings, numbers don’t need quotes around them. So, the code to print the number 10 would be: . show(10) . Try some of these operators on numbers! . | Operator | Name | Example | . | + | addition | 2 + 6 | . | - | subtraction | 8 - 4 | . | * | multiplication | 3 * 23 | . | / | division | 6 / 2 | . | % | modulo | 9 % 2 | . | ^ | powered by | 4 ^ 2 | . ",
    "url": "/Introduction.html#numbers",
    
    "relUrl": "/Introduction.html#numbers"
  },"10": {
    "doc": "Introduction and Documentation",
    "title": "Floating-point Numbers",
    "content": "Try the expression 3 / 2. It returns 1 instead of the correct answer, 1.5. In computer programming, there’s a strong distinction between non-fractional numbers like 1, 3, and 42 and fractional numbers like 3.14 and 5.323. The former are called integers - whole numbers, while the latter are called floats - floating-point numbers. Now try this: . show(3 / 2.0) . This should display 1.5 to the screen, because you have specified that 2.0 is a float. An integer divided by another integer will always return an integer, but the same done with a float will always return a float. This rule is the same for all operators. ",
    "url": "/Introduction.html#floating-point-numbers",
    
    "relUrl": "/Introduction.html#floating-point-numbers"
  },"11": {
    "doc": "Introduction and Documentation",
    "title": "Variables",
    "content": "What if you want to store the result of a calculation, to be accessed later in the code? For this, you use variables. Variables allow you to store items in memory for as long as the ezr² program runs. It’s like a reservation for an item, under the variable name, in the system memory. The syntax to assign a variable is so: item NAME: VALUE. To assign the number 42 to a variable called age, you would write: . item age: 42 . And just like numbers and strings, you can print a variable with the show() function. In the following example, you assign a few variables and then print them. Here you are also adding strings together - this combines or concatenates the two strings. You have to convert the age variable to a string to be able to add it to another string, so you use the built-in as_string function in the integer. item age: 42 item name: \"Joe\" show(\"Hello, my name is \" + name) show(\"My age is \" + age.as_string()) . ",
    "url": "/Introduction.html#variables",
    
    "relUrl": "/Introduction.html#variables"
  },"12": {
    "doc": "Introduction and Documentation",
    "title": "User Input",
    "content": "Let’s make a simple adder - the user will enter two numbers, and the adder will return the result of adding them together. To do so you need to get the user’s input. You can use the get() function for that. You have to feed it the message to show to the user. You can enter nothing if you don’t want any message with the input request. The code should look something like this: . item num1: get(\"Enter num 1: \") item num2: get(\"Enter num 2: \") show(num1 + num2) . If you try the code, you will see that it’s not adding the numbers, but concatenating them! As in, if you enter 2 and 4 as num1 and num2 respectively, the result will be 24, not 6. This is because the get() function returns a string. You need to convert the string into an integer. To do so you use the built-in as_integer() function in the string. You’ll immediately convert the results of the get() functions to integers. Try the below code: . item num1: get(\"Enter num 1: \").as_integer() item num2: get(\"Enter num 2: \").as_integer() show(num1 + num2) . ",
    "url": "/Introduction.html#user-input",
    
    "relUrl": "/Introduction.html#user-input"
  },"13": {
    "doc": "Introduction and Documentation",
    "title": "Conditions",
    "content": "Try entering normal text as the input for the above code - you’ll get an error! This is because the as_integer() function cannot convert normal text to integers. To avoid the user seeing the messy error, you can use the try_as_integer() function. But, this function returns nothing if it is unable to convert the string to an integer! If you try to add nothing and a number together you’ll get an error! You have to make sure that num1 and num2 are integers before you add them. You can do this with if expressions. The if expression has a body of code that only executes whenever the if statement’s condition is met. The additional else statement, which also has a body of code, runs if the if condition is false. The else if statement is used when you wish to satisfy one statement while the other is false. item num1: get(\"Enter num 1: \").try_as_integer() item num2: get(\"Enter num 2: \").try_as_integer() if num1 = nothing do show(\"Num 1 is invalid!\") else if num2 = nothing do show(\"Num 2 is invalid!\") else do show(num1 + num2) end . Here are all the comparison operators: . | Operator | Operation | Example | . | = | equal to | “i” = “i”, “i” = “j” | . | ! | not equal to | “i” ! “i”, “i” ! “j” | . | &gt; | greater than | 5 &gt; 8, 9 &gt; 4 | . | &lt; | less than | 5 &lt; 8, 9 &lt; 4 | . | &gt;= | greater than or equal to | 5 &gt;= 5, 5 &gt;= 2, 5 &gt;= 8 | . | &lt;= | less than or equal to | 5 &lt;= 5, 5 &lt;= 2, 5 &lt;= 8 | . | or | and | 3 = 2 and 2 &gt; 1, 2 = 5 and 5 = 2, 2 = 2 and 2 &gt; 1 | . | and | or | 3 = 2 or 2 &gt; 1, 2 = 5 or 5 = 2, 2 = 2 or 2 &gt; 1 | . If you use comparisons outside if expressions they will return a boolean. Booleans are just two values - true or false. ",
    "url": "/Introduction.html#conditions",
    
    "relUrl": "/Introduction.html#conditions"
  },"14": {
    "doc": "Introduction and Documentation",
    "title": "One-liners",
    "content": "You might have noticed that the if expression has the end keyword at the end. All multi-line ezr² expressions must end with the end keyword. But you can write all multi-line expressions in one line - these are called one-liners. They are the same as writing the multi-line version of an expression, but they must fit in a single line. For example - . if get(\"Hello there! \") = \"General Kenobi\" do show(\"Nice\") . Note that new lines can be coded as the semicolon (;) symbol. Comments are signified by the at symbol (@) at the start. Comments are just more information about the written code - like how the code works. They do not affect the execution of any code and are ignored by ezr². ",
    "url": "/Introduction.html#one-liners",
    
    "relUrl": "/Introduction.html#one-liners"
  },"15": {
    "doc": "Introduction and Documentation",
    "title": "Loops",
    "content": "For the above scripts, you might have found it annoying to have to copy and paste the code again and again to try it out. What if you want the code to run forever? Or even a set number of times? Do you have to keep copying and pasting it? No! You’ll use loops for that. A loop keeps executing the given body of code till a condition is satisfied. ezr² has two types of loops - count loops and while loops. ",
    "url": "/Introduction.html#loops",
    
    "relUrl": "/Introduction.html#loops"
  },"16": {
    "doc": "Introduction and Documentation",
    "title": "Count Loops",
    "content": "Count loops repeat the given code a set number of times. count to 10 do show(\"Hello, World!\") end . The count loop can optionally keep account of the iteration variable. The iteration variable, starting at zero, is the value that gets incremented each loop or iteration. The count loop checks if the iteration variable is less than the max iterations - if not it stops the loop. Iteration variables are useful if you want to iterate over a list or array, using the variable as the index. count to 10 as i do show(\"The iteration variable, named 'i' is: \" + i.as_string()) end . Now, what if you don’t want the loop / iteration variable to start at zero? You can also set the start of a count loop! . count from -5 to 5 as i do show(\"The iteration variable, named 'i' is: \" + i.as_string()) end . Lastly, what if you want the iteration variable to skip a few numbers? Say you only want even numbers? You can set the step of the count loop! The step is what the loop adds to the iteration variable every iteration. count to 10 step 2 as i do show(\"The iteration variable, named 'i' is: \" + i.as_string()) end count from 1 to 10 step 2 as i do show(\"The iteration variable, named 'i' is: \" + i.as_string()) end . ",
    "url": "/Introduction.html#count-loops",
    
    "relUrl": "/Introduction.html#count-loops"
  },"17": {
    "doc": "Introduction and Documentation",
    "title": "While Loops",
    "content": "While loops repeat the given code till the given condition turns false, and revaluate the condition every iteration. item password: get(\"Enter password: \") while password ! \"yeet\" do item password: get(\"Password is false! Try again: \") end . While loops can also be used to run code infinitely! . while true do show(\"Hello, World!\") end . ",
    "url": "/Introduction.html#while-loops",
    
    "relUrl": "/Introduction.html#while-loops"
  },"18": {
    "doc": "Introduction and Documentation",
    "title": "Iteration Control",
    "content": "What if you want to stop a loop while it’s running or want to skip an iteration on a condition? You can use the stop and skip keywords to control the iterations of loops. The skip keyword stops the current iteration and starts the next. The stop keyword just stops the loop. Let’s code a simple example. count to 10 as i do if i = 5 do skip end if i = 8 do stop end show(\"I = \" + i.as_string()) end . In this example, the iteration is skipped when i = 5 and the loop is outright stopped when i = 8. The skip and stop keywords can also be used in while loops. ",
    "url": "/Introduction.html#iteration-control",
    
    "relUrl": "/Introduction.html#iteration-control"
  },"19": {
    "doc": "Introduction and Documentation",
    "title": "Arrays",
    "content": "If you try the one-liner version of the count loop, like - . count to 10 do show(\"Hi!\") . You’ll see a whole lot of nothings in parentheses, separated by commas! That’s an array. Arrays are used to store multiple items of any type in a single variable. It is ordered and unchangeable, or immutable. When you say that arrays are ordered, it means that the items have a defined order, and that order will not change. An array is created by putting items, seperated by commas, between parenthesis. Array items are indexed, the first item has index 0, the second item has index 1 and so on. Items of an array can be accessed with the &lt;= operator - . item array_example: (1, \"string\", 3.54, nothing, false) show(array_example &lt;= 0) show(array_example &lt;= 1) show(array_example &lt;= 2) show(array_example &lt;= 3) show(array_example &lt;= 4) show(array_example &lt;= \"sd\") . That last line of code should show an error - the item after the &lt;= operator must be a valid index in the array! . Here are all the array operators: . | Operator | Name | Example | . | * | duplication | (2,3) * 4 | . | / | division | (6,2,3,4) / 2 | . | &lt;= | item access | (6,2) &lt;= 1 | . Now, what if you want to create an array with one item? Let’s try it - . item array_example: (3) show(array_example) . This won’t work, as ezr² thinks (3) is part of an operation - not an array. So, you have to have a comma after the first item! . item array_example: (3,) show(array_example) . You can access the length of the array with the built-in length variable in array - . item array_example: (1,2,3,4) show(array_example.length) . ",
    "url": "/Introduction.html#arrays",
    
    "relUrl": "/Introduction.html#arrays"
  },"20": {
    "doc": "Introduction and Documentation",
    "title": "Lists",
    "content": "Lists are like arrays, but they are changeable or mutable. They are created with square brackets, instead of parentheses. item list_example: [1,\"string\",1.45,nothing,true] show(list_example) . Here are all the list operators: . | Operator | Name | Example | . | + | append | item lst: [1,5]; lst + 4 | . | - | remove | item lst: [1,5]; lst - 1 | . | * | duplication | [2,3] * 4 | . | / | division | [6,2,3,4] / 2 | . | &lt;= | item access | [6,2] &lt;= 1 | . You can access the length of the list with the built-in length variable in the list, just like with arrays. ",
    "url": "/Introduction.html#lists",
    
    "relUrl": "/Introduction.html#lists"
  },"21": {
    "doc": "Introduction and Documentation",
    "title": "TODO: Dictionaries, Globalization of Variables, Functions, Objects and Classes, Special Functions, Built-ins, Modules, IO and STD Libraries, QuickSyntax",
    "content": " ",
    "url": "/Introduction.html#todo-dictionaries-globalization-of-variables-functions-objects-and-classes-special-functions-built-ins-modules-io-and-std-libraries-quicksyntax",
    
    "relUrl": "/Introduction.html#todo-dictionaries-globalization-of-variables-functions-objects-and-classes-special-functions-built-ins-modules-io-and-std-libraries-quicksyntax"
  },"22": {
    "doc": "Introduction and Documentation",
    "title": "Introduction and Documentation",
    "content": " ",
    "url": "/Introduction.html",
    
    "relUrl": "/Introduction.html"
  },"23": {
    "doc": "The ezr² Programming Language",
    "title": "The ezr² Programming Language",
    "content": "ezr², or ezrSquared when you can’t use the ² symbol - is an easy to learn and practical interpreted programming language for beginners and experts alike made in C#! For more information check out the Introduction and Documentation page. | Advantages | Features (Existing and Planned) | Installation | Usage | Documentation | Latest Updates | Contributing | . ",
    "url": "/",
    
    "relUrl": "/"
  },"24": {
    "doc": "The ezr² Programming Language",
    "title": "Advantages",
    "content": ". | High-level | Interpreted | As close to “natural” language as possible while being practical | Easily embeddable | Easily extensible through C# | Free and open source | . ",
    "url": "/#advantages",
    
    "relUrl": "/#advantages"
  },"25": {
    "doc": "The ezr² Programming Language",
    "title": "Features (Existing and Planned)",
    "content": ". | Interactive shell | Dynamic typing | Object-oriented programming | Error handling | Rich set of operators | Support for modules | Support for C# through CSAELS | Multiple paradigms | Automatic memory management | . ",
    "url": "/#features-existing-and-planned",
    
    "relUrl": "/#features-existing-and-planned"
  },"26": {
    "doc": "The ezr² Programming Language",
    "title": "Installation",
    "content": "BEFORE YOU START CODING: ezr² is still in pre-release status. That means ezr² might get backwards-incompatible updates every now and then. Now, to install ezr² on your PC, follow these steps: . ",
    "url": "/#installation",
    
    "relUrl": "/#installation"
  },"27": {
    "doc": "The ezr² Programming Language",
    "title": "Windows (32 and 64 bit)",
    "content": ". | Download the latest release of ezr² (ezrSquared.Installer.Windows.32-bit.exe for 32-bit systems or ezrSquared.Installer.Windows.64-bit.exe for 64-bit systems) from GitHub. | Run the installer and go through the installation. | Add the folder where ezr² has been installed (C:\\Users\\[USER]\\AppData\\Local\\Programs\\ezr² or C:\\Program Files (x86)\\ezr² by default) to your PATH environment variable. | Verify that ezr² is installed by running ezrSquared in a terminal - the ezr² biShell (built-in shell) should open (press Ctrl+C to exit). | Start coding! | . ",
    "url": "/#windows-32-and-64-bit",
    
    "relUrl": "/#windows-32-and-64-bit"
  },"28": {
    "doc": "The ezr² Programming Language",
    "title": "Linux (64 bit)",
    "content": ". | Download the latest release of ezr² (ezrSquared.Linux.tar.xz) from GitHub. | Extract the tar.xz file to a folder of your choice. | Add the folder to your PATH environment variable. | Verify that ezr² is installed by running ezrSquared in a terminal - the ezr² biShell (built-in shell) should open (press Ctrl+C to exit). | Start coding! | . ",
    "url": "/#linux-64-bit",
    
    "relUrl": "/#linux-64-bit"
  },"29": {
    "doc": "The ezr² Programming Language",
    "title": "Android",
    "content": "Check out ezr² Portable Interpreter on Google Play, an interpreter made with the help of ezr² Net4.8 in Unity! . ",
    "url": "/#android",
    
    "relUrl": "/#android"
  },"30": {
    "doc": "The ezr² Programming Language",
    "title": "Other",
    "content": "For other OSes you can clone the repository, and compile your own build. If you’re a contributor, feel free to add the build to the latest release. If you are interested in how ezr² was embedded to the portable interpreter, check out the C# in ezr² page. ",
    "url": "/#other",
    
    "relUrl": "/#other"
  },"31": {
    "doc": "The ezr² Programming Language",
    "title": "Usage",
    "content": "An ezr² script has the extension .ezr2. To run an ezr² script, use the ezrSquared command followed by the path to the script file: . &gt; ezrSquared hello.ezr2 Use the \"ezrSquared\" command without any arguments to start the biShell: &gt; ezrSquared You can type any valid ezr² expression in the shell and see its result. ",
    "url": "/#usage",
    
    "relUrl": "/#usage"
  },"32": {
    "doc": "The ezr² Programming Language",
    "title": "Documentation",
    "content": "The official documentation for ezr² is available in the Introduction and Documentation page, but is still work in progress. Meanwhile, check out some example programs in GitHub. The offline version of the ezrSquared website was made possible with Jekyll Offline. ",
    "url": "/#documentation",
    
    "relUrl": "/#documentation"
  },"33": {
    "doc": "The ezr² Programming Language",
    "title": "Latest Updates",
    "content": "For those confused by the versioning: 1st place -&gt; Major; 2nd place -&gt; Feature; 3rd place -&gt; Quality of Life; 4th place -&gt; Library; 5th place -&gt; Patch. I plan to switch to Semantic Versioning 2.0.0 for the first stable release. | prerelease-1.5.1.1.0 - [27-03-23] . | Console.set_cursor_position in the IO library now accepts two seperate integers | . | prerelease-1.5.1.0.1 - [25-03-23] . | Fixed bug in special function equals | . | prerelease-1.5.1.0.0 - [23-03-23] . | “all” keyword and ‘,’ symbol now interchangeable in normal and QuickSyntax include expressions | . | prerelease-1.5.0.0.0 - [21-03-23] . | More major changes to module/library system and include expression | Context name of value-derived types now the name of the derived type | . | . ",
    "url": "/#latest-updates",
    
    "relUrl": "/#latest-updates"
  },"34": {
    "doc": "The ezr² Programming Language",
    "title": "Contributing",
    "content": "ezr² is an open source project and welcomes contributions from anyone who wants to improve it. If you want to contribute to ezr², please contact Uralstech at info@uralstech.in. ",
    "url": "/#contributing",
    
    "relUrl": "/#contributing"
  }
}
